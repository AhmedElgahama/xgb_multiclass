#!/usr/bin/env Rscript

## ---- Initialising libraries ----
library(tibble)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(stringr)
library(lubridate)
library(glue)
library(zeallot)
library(xgboost)
library(pROC)
library(forcats)
library(rjson)
library(caTools)
options(dplyr.summarise.inform = FALSE)

## Script that holp helper functions
source('algorithm/0.common_funcs.R')


## Get the training data file
data   <-
  glue(
    '/opt/model_inputs_outputs/inputs/data/testing/',
    list.files(path = "/opt/model_inputs_outputs/inputs/data/testing/")
  )



tester <- function(data_path)
{
  ## Load model and test data
  trained_model         <- read_rds('/opt/model_inputs_outputs/model/artifacts/model.rds')
  variables_to_encode   <- trained_model$variables_to_encode
  variables_numeric     <- trained_model$variables_numeric
  # target_class          <- trained_model$target_class
  # other_class           <- trained_model$other_class
  species               <- trained_model$species
  id_column             <- trained_model$id_column
  
  df_test             <- read_csv(data_path)
  
  id <- df_test %>% select(id_column)
   print("reading")
 df_test[variables_to_encode] <-
    sapply(df_test[variables_to_encode], as.character)
  df_test[variables_numeric]   <-
    sapply(df_test[variables_numeric], as.numeric)
  
  
  full_data_numeric <- df_test %>%
    select(-id_column, -variables_to_encode)
  #full_data_numeric <- as.data.frame(scale(full_data_numeric))
  
  
  
  if (length(variables_to_encode) != 0)
  {
    full_data_categorical <-
      df_test  %>% select(variables_to_encode) %>%
      mutate(across(everything(), ~ replace_na(.x, calc_mode(.x))))
    
    for (i in variables_to_encode) {
      print(i)
      #define original categorical labels
      encoding <- encodings[[i]]
      #convert labels to numeric values
      full_data_categorical[[i]] = transform(encoding, full_data_categorical[[i]])
print("done")
    }
    df_test <-
      cbind(id, full_data_numeric, full_data_categorical)
    
  } else{
    df_test <-
      cbind(id, full_data_numeric)
    
  }
  model <- trained_model$mdl
  
  print("prediction")
  ## Getting probability of each row for the target_class
  test_results <-
    tester_func(mdl = model,
                test_set = df_test,
                species)
  
  # test_results <- test_results$test_predictions
  # 
  # test_results <-
  #   test_results %>% 
  #   mutate(x = 1-pred)
  # 
  # names(test_results)[names(test_results) == 'pred'] <- get("target_class")
  # names(test_results)[names(test_results) == 'x'] <- get("other_class")
  print(test_results)
  ## Saving ids with prediction
  predictions <- cbind(id, test_results)
  predictions %>% write.csv('/opt/model_inputs_outputs/outputs/predictions/predictions.csv', row.names=FALSE)
}



tryCatch(               
  
  # Specifying expression
  expr = {                     
    tester(data)
  },
  # Specifying error message
  error = function(e){         
    write(e %>% as.character(),file="/opt/model_inputs_outputs/outputs/errors/predict_error.txt",append=FALSE)
  }
)
